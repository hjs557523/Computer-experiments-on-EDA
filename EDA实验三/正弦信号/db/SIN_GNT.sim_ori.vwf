/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2010 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 100000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("AR")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 7;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("AR[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("AR[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "AR";
}

SIGNAL("CLK")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("CLKOUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("COUT")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("EN")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("Q")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("Q[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("Q[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "Q";
}

SIGNAL("RST")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("altera_reserved_tdo")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

TRANSITION_LIST("AR[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100000.0;
	}
}

TRANSITION_LIST("AR[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 77006.755;
		LEVEL 1 FOR 22993.245;
	}
}

TRANSITION_LIST("AR[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 45006.87;
		LEVEL 1 FOR 31999.878;
		LEVEL 0 FOR 22993.252;
	}
}

TRANSITION_LIST("AR[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 29007.955;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 15999.814;
			LEVEL 0 FOR 16000.186;
		}
		LEVEL 1 FOR 6992.045;
	}
}

TRANSITION_LIST("AR[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 21008.19;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 7999.743;
			LEVEL 0 FOR 8000.257;
		}
		LEVEL 1 FOR 7999.743;
		LEVEL 0 FOR 6992.067;
	}
}

TRANSITION_LIST("AR[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 17006.209;
		NODE
		{
			REPEAT = 10;
			LEVEL 1 FOR 3999.927;
			LEVEL 0 FOR 4000.073;
		}
		LEVEL 1 FOR 2993.791;
	}
}

TRANSITION_LIST("AR[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 9007.969;
		LEVEL 1 FOR 1239.983;
		LEVEL 0 FOR 4760.017;
		NODE
		{
			REPEAT = 21;
			LEVEL 1 FOR 1999.966;
			LEVEL 0 FOR 2000.034;
		}
		LEVEL 1 FOR 992.031;
	}
}

TRANSITION_LIST("CLK")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 50;
			LEVEL 0 FOR 1000.0;
			LEVEL 1 FOR 1000.0;
		}
	}
}

TRANSITION_LIST("CLKOUT")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1004.122;
		NODE
		{
			REPEAT = 49;
			LEVEL 1 FOR 1000.152;
			LEVEL 0 FOR 999.848;
		}
		LEVEL 1 FOR 995.878;
	}
}

TRANSITION_LIST("COUT")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100000.0;
	}
}

TRANSITION_LIST("EN")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 7680.0;
		LEVEL 1 FOR 92320.0;
	}
}

TRANSITION_LIST("Q[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1009.887;
		LEVEL 1 FOR 98990.113;
	}
}

TRANSITION_LIST("Q[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 37009.874;
		LEVEL 1 FOR 62990.126;
	}
}

TRANSITION_LIST("Q[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 27010.252;
		LEVEL 1 FOR 9999.858;
		LEVEL 0 FOR 14000.142;
		LEVEL 1 FOR 48989.748;
	}
}

TRANSITION_LIST("Q[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 21009.972;
		LEVEL 1 FOR 5999.831;
		LEVEL 0 FOR 4000.169;
		LEVEL 1 FOR 5999.831;
		LEVEL 0 FOR 6000.169;
		LEVEL 1 FOR 7999.831;
		LEVEL 0 FOR 8000.169;
		LEVEL 1 FOR 40990.028;
	}
}

TRANSITION_LIST("Q[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 19010.504;
		LEVEL 1 FOR 1999.753;
		LEVEL 0 FOR 2000.247;
		LEVEL 1 FOR 3999.753;
		LEVEL 0 FOR 2000.247;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1999.753;
			LEVEL 0 FOR 4000.247;
		}
		LEVEL 1 FOR 3999.753;
		LEVEL 0 FOR 4000.247;
		LEVEL 1 FOR 3999.753;
		LEVEL 0 FOR 6000.247;
		LEVEL 1 FOR 29999.753;
		LEVEL 0 FOR 4989.743;
	}
}

TRANSITION_LIST("Q[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 17010.663;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 3999.755;
			LEVEL 0 FOR 4000.245;
		}
		LEVEL 1 FOR 3999.755;
		LEVEL 0 FOR 2000.245;
		LEVEL 1 FOR 1999.755;
		LEVEL 0 FOR 4000.245;
		NODE
		{
			REPEAT = 3;
			LEVEL 1 FOR 1999.755;
			LEVEL 0 FOR 2000.245;
		}
		LEVEL 1 FOR 1999.755;
		LEVEL 0 FOR 4000.245;
		LEVEL 1 FOR 1999.755;
		LEVEL 0 FOR 6000.245;
		LEVEL 1 FOR 17999.755;
		LEVEL 0 FOR 6000.245;
		LEVEL 1 FOR 1999.755;
		LEVEL 0 FOR 2989.582;
	}
}

TRANSITION_LIST("Q[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 17009.514;
		NODE
		{
			REPEAT = 4;
			LEVEL 1 FOR 1999.865;
			LEVEL 0 FOR 2000.135;
		}
		LEVEL 1 FOR 1999.865;
		LEVEL 0 FOR 4000.135;
		LEVEL 1 FOR 3999.865;
		LEVEL 0 FOR 4000.135;
		LEVEL 1 FOR 9999.865;
		LEVEL 0 FOR 4000.135;
		LEVEL 1 FOR 1999.865;
		LEVEL 0 FOR 4000.135;
		LEVEL 1 FOR 3999.865;
		LEVEL 0 FOR 2000.135;
		LEVEL 1 FOR 13999.865;
		LEVEL 0 FOR 2000.135;
		LEVEL 1 FOR 3999.865;
		LEVEL 0 FOR 4000.135;
		LEVEL 1 FOR 1999.865;
		LEVEL 0 FOR 990.621;
	}
}

TRANSITION_LIST("Q[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 27010.217;
		LEVEL 1 FOR 1999.878;
		LEVEL 0 FOR 8000.122;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 1999.878;
			LEVEL 0 FOR 2000.122;
		}
		LEVEL 1 FOR 1999.878;
		LEVEL 0 FOR 10000.122;
		LEVEL 1 FOR 1999.878;
		LEVEL 0 FOR 2000.122;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 3999.878;
			LEVEL 0 FOR 4000.122;
		}
		LEVEL 1 FOR 5999.878;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 4000.122;
			LEVEL 1 FOR 3999.878;
		}
		LEVEL 0 FOR 989.905;
	}
}

TRANSITION_LIST("RST")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 10240.0;
		LEVEL 0 FOR 3760.0;
		LEVEL 1 FOR 86000.0;
	}
}

TRANSITION_LIST("altera_reserved_tdo")
{
	NODE
	{
		REPEAT = 1;
		LEVEL X FOR 100000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "CLK";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "EN";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "RST";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "AR";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
	CHILDREN = 4, 5, 6, 7, 8, 9, 10;
}

DISPLAY_LINE
{
	CHANNEL = "AR[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "AR[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 3;
}

DISPLAY_LINE
{
	CHANNEL = "Q";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 0;
	CHILDREN = 12, 13, 14, 15, 16, 17, 18, 19;
}

DISPLAY_LINE
{
	CHANNEL = "Q[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "Q[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 11;
}

DISPLAY_LINE
{
	CHANNEL = "CLKOUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "COUT";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 21;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "altera_reserved_tdo";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 22;
	TREE_LEVEL = 0;
}

TIME_BAR
{
	TIME = 27900;
	MASTER = TRUE;
}
;
